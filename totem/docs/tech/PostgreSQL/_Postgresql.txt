---
title: Title for search engines; can be different from the actual heading
description: A short description of this page
image: a thumbnail image to be shown in social media cards
keywords: [keywords, describing, the main topics]
---

<!-- C 這是 HTML 註解 : 注意註解前  __必須___ 有空行 -->

<!-- https://jira.ncgm.sinica.edu.tw/confluence/pages/viewpage.action?spaceKey=~olgahu&title=Home -->

import { CodeBlock, dracula  } from "react-code-blocks";
	 <CodeBlock
      text={`	  
	let x ='先一個 tab 再加內容';
	  `}
      language='JavaScript'
      showLineNumbers='true'
      //theme={dracula} //use default else 
    />
	
	
/* B 這是 JS 註解(mdx js block 所用方式): 注意註解前後  __不可___ 有空行或 BR */
&lt;! 這邊演示如何在 JSX 呈現角括號(上範例不可有空行) --&gt;

<div style={{backgroundColor: 'red', color: 'blue' }} >
一個 div 區塊, 在 md 檔中設定 style 的 template 
<br/>
{/* C 這是 JSX 註解(以大括弧封起一個程式碼區間, 然後依據 js 的方式寫註解 ): 注意註解前後不可有空行 */}



=====
GroupBy

select * from subject where subjectId in (
  select subjectId from (
     select  subjectId,count(subjectId) from subject
     group by subjectid ) as test
  where test.count > 1
)  order by subjectId




select project_id, count(project_id) from  (
 select * from subject as filterSubject where subjectId in (
    select subjectId from (
       select  subjectId,count(subjectId) from subject
       group by subjectid ) as test
    where test.count > 1
  )
) as result
group by project_id



//尋找 subject table 中 重複的 subjectId,重複多少筆

select  subjectId,count(subjectId) from subject group by subjectid
order by count desc





=====
index建立
-- Index: index_answer_questionresponse
 
-- DROP INDEX index_answer_questionresponse;
 
CREATE INDEX index_answer_questionresponse
  ON answer
  USING btree
  (question_response_id );
  
  
  
=====   multiTableLeftJoin
  
 ---------------------------------------------------------
select
a.myRuleID
,a.rule_ID ,a.draftRule_ID
,b.ddCRFTable_darftRuleId,b.ddCRFTable_ID
,c.ddOption_Id
from
---- a table
( select rule.ruleid as myRuleID ,
         rule.id as rule_ID,
         draftrule_id as draftRule_ID
        from rule left join  draftrule  on rule.draftrule_id=draftrule.id )
        as a
 
---- b table
left join  ( select ddCrf.draftrule_id as ddCRFTable_darftRuleId,
            ddCrf.id as ddCRFTable_ID
            from draft_dependency_crf ddCrf )
    as b
    on b.ddCRFTable_darftRuleId= a.draftrule_id
 
---- c table
left join (select ddOption.option_id as ddOption_Id,
            ddOption.draftdependencycrf_id as ddOption_CrfId
            from draftdependencycrf_option  ddOption )
        as c
    on c.ddOption_CrfId = b.ddCRFTable_ID
 
------ where condition
where  c.ddOption_Id in (46997,46998)
---------------------------------------------------------
--------------------------------------------------------- 



======  multiTableLeftJoin 簡化版
 ---------------------------------------------------------
select
a.myRuleID
 
from
---- a table
( select rule.ruleid as myRuleID ,
         --rule.id as rule_ID,
         draftrule_id as draftRule_ID
        from rule left join  draftrule  on rule.draftrule_id=draftrule.id )
        as a
 
---- b table
left join  ( select ddCrf.draftrule_id as ddCRFTable_darftRuleId,
            ddCrf.id as ddCRFTable_ID
            from draft_dependency_crf ddCrf )
    as b
    on b.ddCRFTable_darftRuleId= a.draftrule_id
 
---- c table
left join (select ddOption.option_id as ddOption_Id,
            ddOption.draftdependencycrf_id as ddOption_CrfId
            from draftdependencycrf_option  ddOption )
        as c
    on c.ddOption_CrfId = b.ddCRFTable_ID
 
------ where condition
where  c.ddOption_Id in (46997,46998)
---------------------------------------------------------
---------------------------------------------------------








===== SqlRowSet

SqlRowSet rs = jdbcTemplate.queryForRowSet(sql);
while (rs.next()) {
     ret.add(rs.getString(1));
}
 
return ret;






=========時間比較
Example 1：
判断两个时间差大于4个小时
select timestamp '2013-11-11 10:00:00' - timestamp '2013-11-08 12:00:00' > interval '4 hour';
iquestion example (1):

select answerbook.id,subject.id,subject.subjectId,answerbook.createdate,subject.create_time
, (answerbook.createdate - subject.create_time < interval '2 minute' ) as myInterval
from answerbook , subject
where answerbook.subject_id = subject.id
order by myInterval desc


iquestion example (2):
select answerbook.id,subject.id,subject.subjectId,answerbook.createdate,subject.create_time
from answerbook , subject
where answerbook.subject_id = subject.id
and  answerbook.createdate - subject.create_time < interval '2 minute'


註 interval單位有效數值如下 ??
有效數值是︰
 
microseconds
milliseconds
second
minute
hour
day
week
month
year
decade
century
millennium


Example 2：
– 获取时间差的总体小时差 然后再判断

mrapp=> select extract(day from t) * 24 + extract(hour from t) > 4 from (select (timestamp '2013-12-14 12:00:00' - timestamp '2013-12-11 4:00:00') as t) as a;




============= 欄位值合併(concatenation)
Example :
select username||'('||full_name||')' as userName_fullName , id,username,full_name from ngc_user

參考網站 ：http://www.postgresql.org/docs/9.1/static/functions-string.html



====================
postgreSQL Blob

select * from pg_largeobject

PostgreSQL 本身並不支援Blob, Clob 欄位。你得使用 bytea, oid, text 等欄位來模擬。text 可以對應的 jdbc clob。而 bytea 與 oid 則對應到 Blob。bytea(byte array) 可直接在該欄位上儲存所有 binary 的資料，算是最簡單的做法。但缺點是 query 該 row 時也會一口氣把全部的資料都讀到記憶體裡... 除非是儲存一些 .gif, .jpg 之類的小檔，不然還是選擇採間接儲存的 oid 比較好。現行 hibernate 的工具會替 java Blob 產生 oid 的欄位型別。 oid 是 PostgreSQL 一個內藏指標，任何資料庫物件 (sequence/table/row... etc) 都有一個 oid。而 oid 欄位就是可儲存 oid 值的欄位。PosgreSQL 裡還有一個系統 table 叫 pg_largeobject，所有的 lob 物件都會存到這個公用的 table 上。





===================

