"use strict";(self.webpackChunktotem=self.webpackChunktotem||[]).push([[6733],{66369:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>h,contentTitle:()=>s,default:()=>i,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var n=a(87462),o=(a(67294),a(3905));a(13848);const r={title:"Python \u62bd\u8c61\u65b9\u6cd5",description:"Python Abstract Method",keywords:["Python","abstractmethod"]},s="Python \u62bd\u8c61\u65b9\u6cd5 (Abstract Method)",c={unversionedId:"DevTech/Python/OOP/Python_4_AbstractMethod",id:"DevTech/Python/OOP/Python_4_AbstractMethod",title:"Python \u62bd\u8c61\u65b9\u6cd5",description:"Python Abstract Method",source:"@site/docs/DevTech/Python/OOP/Python_4_AbstractMethod.md",sourceDirName:"DevTech/Python/OOP",slug:"/DevTech/Python/OOP/Python_4_AbstractMethod",permalink:"/docs/DevTech/Python/OOP/Python_4_AbstractMethod",draft:!1,tags:[],version:"current",frontMatter:{title:"Python \u62bd\u8c61\u65b9\u6cd5",description:"Python Abstract Method",keywords:["Python","abstractmethod"]},sidebar:"totem_sidebar",previous:{title:"Python-Sorting by pandas",permalink:"/docs/DevTech/Python/Misc/Sorting_by_pandas_Python"},next:{title:"Python \u7269\u4ef6\u4ecb\u7d39",permalink:"/docs/DevTech/Python/OOP/Python_4_Class"}},h={},l=[{value:"Abstract Method",id:"abstract-method",level:2}],m={toc:l},d="wrapper";function i(t){let{components:e,...a}=t;return(0,o.kt)(d,(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python-\u62bd\u8c61\u65b9\u6cd5-abstract-method"},"Python \u62bd\u8c61\u65b9\u6cd5 (Abstract Method)"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u53c3\u8003: "),(0,o.kt)("blockquote",{parentName:"blockquote"},(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"../Advanced/Python_2_Function"},"Python \u51fd\u6578"),(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("a",{parentName:"p",href:"../OOP/Python_4_Class#instance-object-append-method"},"Instance Object \u8ffd\u52a0 Method"),": ",(0,o.kt)("span",{style:{color:"#0044FF"}}," ",(0,o.kt)("strong",{parentName:"p"},"abstract method \u4e0d\u53ef\u4ee5\u4ee5\u8ffd\u52a0\u7684\u65b9\u5f0f\u5be6\u4f5c")," "),"  "))),(0,o.kt)("h2",{id:"abstract-method"},"Abstract Method"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u9700\u4f7f\u7528 abc \u5957\u4ef6",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"ABCMeta Class"),(0,o.kt)("li",{parentName:"ul"},"@abstractmethod annotation"))),(0,o.kt)("li",{parentName:"ul"},"\u5b50\u985e\u5225\u82e5\u672a\u5be6\u4f5c Abstract Method \u56de\u62cb\u51fa: ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("span",{style:{color:"#0044FF"}}," TypeError: Can't instantiate abstract class ClassName with abstract method MethodName")," ")))),(0,o.kt)("li",{parentName:"ul"},"metaclass : Python interpreter \u7528\u4f86\u7ba1\u7406\u5efa\u69cb type \u6642\u4f7f\u7528")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"\nfrom abc import ABCMeta\nfrom abc import abstractmethod\n\n# \u6ce8\u610f: metaclass\nclass Html_Form(metaclass=ABCMeta):\n    def __init__(self):\n        pass\n\n    @abstractmethod\n    def submit(self, forward_to, **kwargs):\n        print('Submit Abstract Html_Form')\n\n\nclass LoginForm(Html_Form):\n\n    def submit(self, forward_to, **kwargs):\n        print('Submit LoginForm')\n        print(kwargs)\n\n\nf = LoginForm()\nf.submit(forward_to='roadmap', username='username', pwd='password')\n    \n")))}i.isMDXComponent=!0}}]);