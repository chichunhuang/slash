"use strict";(self.webpackChunkinsect_totem=self.webpackChunkinsect_totem||[]).push([[5370],{25742:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"Java/Cypher/Java_Pbe_Cipher","title":"Java PBE \u52a0\u89e3\u5bc6","description":"\u4ee5 Java PBE PBEWITHMD5andDES \u9032\u884c\u8cc7\u6599\u52a0\u89e3\u5bc6","source":"@site/docs/11_Java/Cypher/Java_Pbe_Cipher.md","sourceDirName":"11_Java/Cypher","slug":"/Java/Cypher/Java_Pbe_Cipher","permalink":"/docs/Java/Cypher/Java_Pbe_Cipher","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Java PBE \u52a0\u89e3\u5bc6","description":"\u4ee5 Java PBE PBEWITHMD5andDES \u9032\u884c\u8cc7\u6599\u52a0\u89e3\u5bc6","keywords":["pbe","java","cipher","encrypt","decrypt"]},"sidebar":"totem_sidebar","previous":{"title":"KeyPairGenerator \u516c\u79c1\u9470","permalink":"/docs/Java/Cypher/Java_KeyPairGenerator"},"next":{"title":"Java RSA \u52a0\u89e3\u5bc6","permalink":"/docs/Java/Cypher/Java_Rsa_Cipher"}}');var a=n(74848),c=n(28453);const i={title:"Java PBE \u52a0\u89e3\u5bc6",description:"\u4ee5 Java PBE PBEWITHMD5andDES \u9032\u884c\u8cc7\u6599\u52a0\u89e3\u5bc6",keywords:["pbe","java","cipher","encrypt","decrypt"]},p="PBEWITHMD5andDES",o={},s=[{value:"\u5c0d\u7a31\u6027\u52a0\u5bc6\u7b97\u6cd5\uff1a",id:"\u5c0d\u7a31\u6027\u52a0\u5bc6\u7b97\u6cd5",level:2}];function y(r){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,c.R)(),...r.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"pbewithmd5anddes",children:"PBEWITHMD5andDES"})}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsxs)(e.p,{children:["\u985e\u4f3c\u5c0d",(0,a.jsx)(e.a,{href:"./Java_Aes_Cipher",children:"\u7a31\u5f0f\u52a0\u5bc6"}),"\uff0c\u53ea\u662f\u6536\u9001\u96d9\u65b9\u4fdd\u5b58\u7684\u4e0d\u662f\u91d1\u9470\u800c\u662f\u4e00\u7d44\u5bc6\u78bc\u3002\r\n\u6536\u9001\u96d9\u65b9\u6301\u6709\u5bc6\u78bc\uff0cApp\u7ba1\u7406\u4eba(ex",":MIS",")\u5247\u4fdd\u6709\u96dc\u6e4a\u78bc\uff0c\u7a0b\u5f0f\u4e2d\u5247\u5167\u85cf\u6f14\u7b97\u905e\u8ff4\u6b21\u6578\u3002\r\nPBEWITHMD5andDES \u6f14\u7b97\u6cd5\u591a\u4e86\u6a5f\u500b\u53c3\u6578"]}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"\u4f7f\u7528 pwd \u4f86\u5efa\u7acb encryption key\u3002"}),"\n",(0,a.jsx)(e.li,{children:"salt string"}),"\n",(0,a.jsx)(e.li,{children:"\u6f14\u7b97\u7684\u905e\u8ff4\u6b21\u6578\r\n\u4e5f\u5c31\u662f\u8aaa\u76f8\u8f03\u65bc\u4e00\u822c\u5c07 salt \u52a0\u5165\u8cc7\u6599\u52a0\u5bc6\u6f14\u7b97\u5916\uff0c\r\nPBEWITHMD5andDES A:\u9084\u6703\u6aa2\u67e5\u89e3\u5bc6\u91d1\u9470\u662f\u5426\u6b63\u78ba\u3002\r\n\u53e6\u5916\uff0cB:\u4e5f\u6703\u4f9d\u64da iteration count \u8a2d\u5b9a\u503c\u4f86\u91cd\u8907\u52a0\u5bc6\u6240\u5f97\u51fa\u7684\u7d50\u679c\u3002\r\n\u5229\u7528\u589e\u52a0 A/B \u5169\u9805\u63aa\u65bd\u589e\u52a0\u88ab\u7834\u89e3\u7684\u96e3\u5ea6\u3002"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"\u5c0d\u7a31\u6027\u52a0\u5bc6\u7b97\u6cd5",children:"\u5c0d\u7a31\u6027\u52a0\u5bc6\u7b97\u6cd5\uff1a"}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:"\u5c0d\u7a31\u5f0f\u52a0\u5bc6\u5c31\u662f\u52a0\u5bc6\u548c\u89e3\u5bc6\u4f7f\u7528\u540c\u4e00\u500b\u5bc6\u9470\r\n\u8cc7\u6599\u63a5\u6536\u96d9\u65b9\u9700\u5148\u77e5\u9053\u96d9\u65b9\u52a0\u5bc6\u7684\u91d1\u9470\u8207\u6f14\u7b97\u6cd5\uff0c\u624d\u80fd\u5b8c\u6574\u52a0\u89e3\u5bc6\u3002"}),"\n",(0,a.jsx)(e.p,{children:"ex: AES\u3001DES\u30013DES\u3001PBEWITHMD5andDES"}),"\n"]}),"\n",(0,a.jsx)(e.h1,{id:"pbewithmd5anddes-\u7bc4\u4f8b",children:"PBEWITHMD5andDES \u7bc4\u4f8b"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-Javascript",children:'import java.security.InvalidAlgorithmParameterException;\r\nimport java.security.InvalidKeyException;\r\nimport java.security.Key;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.spec.InvalidKeySpecException;\r\nimport java.util.Arrays;\r\nimport javax.crypto.BadPaddingException;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.IllegalBlockSizeException;\r\nimport javax.crypto.NoSuchPaddingException;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.SecretKeyFactory;\r\nimport javax.crypto.spec.PBEKeySpec;\r\nimport javax.crypto.spec.PBEParameterSpec;\r\n\r\nimport util.EncryptDecryptException;\r\n\r\n// \u985e\u4f3c\u5c0d\u7a31\u5f0f\u52a0\u5bc6\uff0c\u53ea\u662f\u6536\u9001\u96d9\u65b9\u4fdd\u5b58\u7684\u4e0d\u662f\u91d1\u9470\u800c\u662f\u4e00\u7d44\u5bc6\u78bc\u3002\r\n// \u6536\u9001\u96d9\u65b9\u6301\u6709\u5bc6\u78bc\uff0cApp\u7ba1\u7406\u4eba(ex:MIS)\u5247\u4fdd\u6709\u96dc\u6e4a\u78bc\uff0c\u7a0b\u5f0f\u4e2d\u5247\u5167\u85cf\u6f14\u7b97\u905e\u8ff4\u6b21\u6578\u3002\r\n\r\npublic class PbeCipher {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        try {\r\n            String pwd = "password";\r\n\r\n            // Salt must be 8 bytes long\r\n            String salt = "saltsalt";\r\n\r\n            byte[] data = new byte[] { 1, 3, 5, 7, 11, 13, 17, 19 };\r\n\r\n            byte[] encrypted = PbeCipher.symmetricalEncrypt(data, pwd, salt);\r\n\r\n            System.out.println(Arrays.equals(data,\r\n                    PbeCipher.symmetricalDecrypt(encrypted, pwd, salt)));\r\n\r\n            /**\r\n             * <pre>\r\n             * System.out.println(Arrays.equals(data,\r\n             *         PbeCipher.symmetricalDecrypt(encrypted, pwd2, salt)));\r\n             * \r\n             * System.out.println(Arrays.equals(data,\r\n             *         PbeCipher.symmetricalDecrypt(encrypted, pwd, salt2)));\r\n             * // javax.crypto.BadPaddingException: Given final block not\r\n             * // properly\r\n             * // padded. Such issues can arise if a bad key is used during\r\n             * // decryption.\r\n             * \r\n             * </pre>\r\n             */\r\n\r\n        } catch (EncryptDecryptException e) {\r\n            e.printStackTrace();\r\n            throw new RuntimeException("unexpected", e);\r\n        }\r\n    }\r\n\r\n    // iteration count: \u905e\u8ff4\u6f14\u7b97\u6b21\u6578\r\n    private static final int ITERATION_COUNT = 31;\r\n\r\n    public static final String SYMMETRICAL_ALGORITHM = "PBEWITHMD5andDES";\r\n\r\n    /**\r\n     * @param cipherMode\r\n     *            : javax.crypto.Cipher.DECRYPT_MODE / Cipher.ENCRYPT_MODE\r\n     */\r\n    private static Cipher createSymmetricalCipher(String password, String salt,\r\n            int cipherMode) throws EncryptDecryptException {\r\n        try {\r\n            Key key = prepareEncryptionKey(password);\r\n            PBEParameterSpec paramSpec = new PBEParameterSpec(salt.getBytes(),\r\n                    ITERATION_COUNT);\r\n            Cipher cipher = Cipher.getInstance(SYMMETRICAL_ALGORITHM);\r\n            cipher.init(cipherMode, key, paramSpec);\r\n            return cipher;\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(e);\r\n        } catch (NoSuchPaddingException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(e);\r\n        } catch (InvalidKeyException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(e);\r\n        } catch (InvalidAlgorithmParameterException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(e);\r\n        }\r\n    }\r\n\r\n    private static Key prepareEncryptionKey(String password)\r\n            throws EncryptDecryptException {\r\n        PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\r\n\r\n        try {\r\n            SecretKeyFactory keyFactory = SecretKeyFactory\r\n                    .getInstance(SYMMETRICAL_ALGORITHM);\r\n            SecretKey secretKey = keyFactory.generateSecret(keySpec);\r\n            return secretKey;\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(e);\r\n        } catch (InvalidKeySpecException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(e);\r\n        }\r\n    }\r\n\r\n    public static byte[] symmetricalDecrypt(byte[] data, String password,\r\n            String salt) throws EncryptDecryptException {\r\n        if (data == null) return null;\r\n\r\n        try {\r\n            Cipher cipher = createSymmetricalCipher(password, salt,\r\n                    Cipher.DECRYPT_MODE);\r\n            return cipher.doFinal(data);\r\n        } catch (IllegalBlockSizeException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(e);\r\n        } catch (BadPaddingException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(e);\r\n        }\r\n\r\n    }\r\n\r\n    public static byte[] symmetricalEncrypt(byte[] data, String password,\r\n            String salt) throws EncryptDecryptException {\r\n        if (data == null) return null;\r\n\r\n        try {\r\n            Cipher cipher = createSymmetricalCipher(password, salt,\r\n                    Cipher.ENCRYPT_MODE);\r\n\r\n            return cipher.doFinal(data);\r\n        } catch (IllegalBlockSizeException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(e);\r\n        } catch (BadPaddingException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(e);\r\n        }\r\n    }\r\n}\n'})})]})}function d(r={}){const{wrapper:e}={...(0,c.R)(),...r.components};return e?(0,a.jsx)(e,{...r,children:(0,a.jsx)(y,{...r})}):y(r)}},28453:(r,e,n)=>{n.d(e,{R:()=>i,x:()=>p});var t=n(96540);const a={},c=t.createContext(a);function i(r){const e=t.useContext(c);return t.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function p(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(a):r.components||a:i(r.components),t.createElement(c.Provider,{value:e},r.children)}}}]);