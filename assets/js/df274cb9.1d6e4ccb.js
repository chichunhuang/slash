"use strict";(globalThis.webpackChunkinsect_totem=globalThis.webpackChunkinsect_totem||[]).push([[4868],{28453:(r,n,e)=>{e.d(n,{R:()=>s,x:()=>a});var t=e(96540);const i={},c=t.createContext(i);function s(r){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof r?r(n):{...n,...r}},[n,r])}function a(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(i):r.components||i:s(r.components),t.createElement(c.Provider,{value:n},r.children)}},44966:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"Java/Cypher/Java_Aes_Cipher","title":"Java AES \u52a0\u89e3\u5bc6","description":"\u4ee5 Java AES \u9032\u884c\u8cc7\u6599\u52a0\u89e3\u5bc6","source":"@site/docs/110_Java/10_Cypher/Java_Aes_Cipher.md","sourceDirName":"110_Java/10_Cypher","slug":"/Java/Cypher/Java_Aes_Cipher","permalink":"/docs/Java/Cypher/Java_Aes_Cipher","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Java AES \u52a0\u89e3\u5bc6","description":"\u4ee5 Java AES \u9032\u884c\u8cc7\u6599\u52a0\u89e3\u5bc6","keywords":["aes","java","cipher","encrypt","decrypt"]},"sidebar":"totem_sidebar","previous":{"title":"HTML \u95dc\u9589\u81ea\u52d5\u5b8c\u6210","permalink":"/docs/HTML/HTML_Autocomplete"},"next":{"title":"Java Cipher Intro","permalink":"/docs/Java/Cypher/Java_Encryption"}}');var i=e(74848),c=e(28453);const s={title:"Java AES \u52a0\u89e3\u5bc6",description:"\u4ee5 Java AES \u9032\u884c\u8cc7\u6599\u52a0\u89e3\u5bc6",keywords:["aes","java","cipher","encrypt","decrypt"]},a="AES \u9032\u968e\u52a0\u5bc6\u6a19\u6e96",o={},p=[];function l(r){const n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...r.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u6709\u6642\u6703\u9700\u8981\u5c07\u8cc7\u6599\u9032\u884c\u53ef\u56de\u5fa9\u7684\u52a0\u5bc6\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u4f8b\u5982: ISO 27001 DLP(data leakage prevention)\uff0c\u4e00\u822c\u5728\u9a57\u8b49\u6642\u6700\u4f4e\u8981\u6c42\u70ba\u5bc6\u78bc\u539f\u5247\u3001\u786c\u789f\u8cc7\u6599\u8207 DB \u8cc7\u6599\u52a0\u5bc6\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6b64\u6642\u82e5\u727d\u6d89\u5230\u654f\u611f\u6027\u8cc7\u6599\uff0c\u4e0b\u5217\u65b9\u6cd5\u4e5f\u8a31\u6709\u7528\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"DBA \u77e5\u9053\u52a0\u5bc6\u6642\u7684 half-salt\u3002 DBA \u53ea\u77e5\u9053\u4e00\u534a\u7684 salt \u4e14\u6709\u6a5f\u6703\u63a5\u89f8\u5bc6\u6587\u3002\u7121\u6cd5\u5b8c\u6574\u89e3\u5bc6\u3002\r\n\u5de5\u7a0b\u5e2b\u77e5\u9053\u52a0\u5bc6\u6f14\u7b97\u6cd5\u52a0\u53e6\u4e00\u534a\u7684 salt \u4ee5\u53ca salt \u5408\u4f75\u65b9\u6cd5\u3002\u4f46\u662f\u7121\u63a5\u89f8\u8cc7\u6599\u3002\r\nApp \u4f7f\u7528\u8005\u50c5\u80fd\u5728\u7cfb\u7d71\u4e0a\u4f7f\u7528\u8cc7\u6599\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"aes-\u9032\u968e\u52a0\u5bc6\u6a19\u6e96",children:"AES \u9032\u968e\u52a0\u5bc6\u6a19\u6e96"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"\u5c0d\u7a31\u52a0\u5bc6\u6f14\u7b97\u6cd5"})," ",":AES","\u7b97\u6cd5\u4f7f\u7528 ",(0,i.jsx)("span",{style:{color:"#0044FF"},children:"[\u76f8\u540c]"})," \u7684\u5bc6\u9470\u4f86\u5c0d\u8cc7\u6599\u9032\u884c ",(0,i.jsx)("span",{style:{color:"#0044FF"},children:"[\u52a0\u5bc6]"})," \u548c ",(0,i.jsx)("span",{style:{color:"#0044FF"},children:"[\u89e3\u5bc6]"})]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u52a0\u5bc6\u7a2e\u985e: \u4f9d\u52a0\u89e3\u5bc6\u6f14\u7b97\u6cd5\u7a2e\u985e\u5206 ",(0,i.jsx)(n.strong,{children:"\u5c0d\u7a31\u5f0f"})," \u548c ",(0,i.jsx)(n.strong,{children:"\u975e\u5c0d\u7a31\u5f0f"})," \u52a0\u5bc6"]}),"\n",(0,i.jsx)(n.p,{children:"\u5c0d\u7a31\u6027\u52a0\u5bc6\u7b97\u6cd5\uff1a"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u5c0d\u7a31\u5f0f\u52a0\u5bc6\u5c31\u662f\u52a0\u5bc6\u548c\u89e3\u5bc6\u4f7f\u7528\u540c\u4e00\u500b\u5bc6\u9470\r\n\u8cc7\u6599\u63a5\u6536\u96d9\u65b9\u9700\u5148\u77e5\u9053\u96d9\u65b9\u52a0\u5bc6\u7684\u91d1\u9470\u8207\u6f14\u7b97\u6cd5\uff0c\u624d\u80fd\u5b8c\u6574\u52a0\u89e3\u5bc6\u3002\r\nex: AES\u3001DES\u30013DES"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u975e\u5c0d\u7a31\u7b97\u6cd5\uff1a"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u975e\u5c0d\u7a31\u5f0f\u52a0\u5bc6\u5c31\u662f\u52a0\u5bc6\u548c\u89e3\u5bc6\u6240\u4f7f\u7528\u4e0d\u540c\u5bc6\u9470\uff0c\u4e00\u822c\u7a31 ",(0,i.jsx)(n.strong,{children:"\u516c\u9470"})," \u548c ",(0,i.jsx)(n.strong,{children:"\u79c1\u9470"})," \u3002\r\n\u516c\u79c1\u9470\u5fc5\u9700\u914d\u5c0d\u4f7f\u7528\uff0c\u5426\u5247\u4e0d\u80fd\u6253\u958b\u52a0\u5bc6\u6587\u4ef6\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u8a0a\u606f\u63a5\u6536\u65b9\u5148\u88fd\u5099\u516c\u9470\u8207\u79c1\u9470\u3002\u4e26\u5c07\u516c\u9470\u767c\u9001\u7d66\u8cc7\u6599\u4f86\u6e90\u65b9\u3002\r\n\u8cc7\u6599\u6e90\u982d\u5247\u4f7f\u7528\u63a5\u6536\u65b9\u7684\u516c\u9470\u5c07\u8a0a\u606f\u52a0\u5bc6\uff0c\u7136\u5f8c\u5c07\u7955\u6587\u56de\u50b3\u7d66\u63a5\u6536\u65b9\uff0c\u63a5\u6536\u65b9\u518d\u4f9d\u64da\u81ea\u5df1\u898f\u5247\u7d50\u5408\u516c\u79c1\u9470\u9032\u884c\u89e3\u5bc6\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["\u6240\u4ee5\uff0c\u539f\u5247\u4e0a\u662f ",(0,i.jsx)(n.strong,{children:"\u63a5\u6536"})," \u8a0a\u606f\u7684\u4eba\u4f86 ",(0,i.jsx)(n.strong,{children:"\u6c7a\u5b9a\u6f14\u7b97"})," \u5de5\u5177\u548c ",(0,i.jsx)(n.strong,{children:"\u6d3e\u767c\u91d1\u9470"})," \u3002\r\nex: RSA\u3001DSA\u3001ECC"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"aes128-encryption-and-decryption-example",children:"Aes128 Encryption and Decryption Example"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Aes128EncrypterUtil.java"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Javascript",children:'    public class Aes128EncrypterUtil {\r\n        public static String encryptHex(String str) {\r\n            Aes128Cipher encrypter = new Aes128Cipher();\r\n            return encrypter.encrypt(str);\r\n        }\r\n        public static String decryptHex(String str) {\r\n            Aes128Cipher encrypter = new Aes128Cipher();\r\n            return encrypter.decrypt(str);\r\n        }\r\n        public static String encryptBased64(String str) {\r\n            Aes128Cipher encrypter = new Aes128Cipher();\r\n            return encrypter.encrypt(str, "BASED64");\r\n        }\r\n        public static String decryptBased64(String str) {\r\n            Aes128Cipher encrypter = new Aes128Cipher();\r\n            return encrypter.decrypt(str, "BASED64");\r\n        }\r\n    }\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Aes128Cipher.java"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Javascript",children:"import java.io.UnsupportedEncodingException;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.util.Arrays;\r\nimport java.util.Base64;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.IllegalBlockSizeException;\r\nimport javax.crypto.KeyGenerator;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.spec.SecretKeySpec;\r\n/**\r\n * <pre>\r\n<h1>\u9032\u968e\u52a0\u5bc6\u6a19\u6e96</h1>\r\n<h2>\u5c0d\u7a31\u52a0\u5bc6\u7b97\u6cd5 :</h2> \r\nAES\u7b97\u6cd5\u4f7f\u7528[\u76f8\u540c]\u7684\u5bc6\u9470\u4f86\u5c0d\u8cc7\u6599\u9032\u884c[\u52a0]\u5bc6\u548c[\u89e3]\u5bc6\r\n<h2>\u52a0\u5bc6\u904e\u7a0b\u5305\u62ec\u4ee5\u4e0b\u6b65\u9a5f\uff1a</h2>\r\n ref: https://inbound.technology/%E4%BB%80%E9%BA%BC%E6%98%AF-aes-%E5%B0%8D%E7%A8%B1%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95%EF%BC%9Fphp-%E8%88%87-nodejs-%E7%AF%84%E4%BE%8B%E5%AF%A6%E4%BD%9C/\r\n<ol>\r\n<li>\u5bc6\u9470\u64f4\u5c55\uff1a\u5c07\u8f38\u5165\u7684\u5bc6\u9470\u64f4\u5c55\u70ba\u66f4\u9577\u7684\u5bc6\u9470\u5e8f\u5217\uff0c\u4ee5\u4f9b\u5f8c\u7e8c\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u904e\u7a0b\u4f7f\u7528\u3002</li>\r\n<li>\u521d\u59cb\u8f2a\uff1a\u5c07\u660e\u6587\u6578\u64da\u6309\u7167\u4e00\u5b9a\u7684\u898f\u5247\u8207\u5bc6\u9470\u5e8f\u5217\u9032\u884c\u7570\u6216\u64cd\u4f5c\u3002</li>\r\n<li>\u8f2a\u51fd\u6578\uff1a\u91cd\u8986\u57f7\u884c\u591a\u8f2a\u64cd\u4f5c\uff0c\u6bcf\u4e00\u8f2a\u90fd\u5305\u62ec\u56db\u500b\u6b65\u9a5f\uff1a</li>\r\n<li>\u5b57\u7bc0\u66ff\u63db\uff1a\u5c07\u6578\u64da\u4e2d\u7684\u6bcf\u500b\u5b57\u7bc0\u66ff\u63db\u70ba\u53e6\u4e00\u500b\u5b57\u7bc0\uff0c\u4f7f\u7528\u4e00\u500b\u56fa\u5b9a\u7684S\u76d2\u9032\u884c\u6620\u5c04\u3002</li>\r\n    <li>\u884c\u79fb\u4f4d\uff1a\u5c07\u6578\u64da\u77e9\u9663\u4e2d\u7684\u6bcf\u4e00\u884c\u5faa\u74b0\u5de6\u79fb\u4e0d\u540c\u7684\u504f\u79fb\u91cf\u3002</li>\r\n    <li>\u5217\u6df7\u6dc6\uff1a\u5c07\u6578\u64da\u77e9\u9663\u4e2d\u7684\u6bcf\u4e00\u5217\u9032\u884c\u6df7\u6dc6\u3002</li>\r\n    <li>\u5bc6\u9470\u52a0\uff1a\u5c07\u5bc6\u9470\u5e8f\u5217\u4e2d\u7684\u4e00\u90e8\u5206\u8207\u6578\u64da\u9032\u884c\u7570\u6216\u64cd\u4f5c\u3002</li>\r\n<li>\u6700\u7d42\u8f2a\uff1a\u6700\u5f8c\u4e00\u8f2a\u64cd\u4f5c\u4e2d\uff0c\u7701\u7565\u5217\u6df7\u6dc6\u6b65\u9a5f\uff0c\u53ea\u5305\u62ec\u5b57\u7bc0\u66ff\u63db\u3001\u884c\u79fb\u4f4d\u548c\u5bc6\u9470\u52a0\u3002</li>\r\n<li>\u8f38\u51fa\uff1a\u8f38\u51fa\u52a0\u5bc6\u5f8c\u7684\u6578\u64da\u3002</li>\r\n</ol>\r\n * </pre>\r\n */\r\npublic class Aes128Cipher {\r\n    public static final String CIPHER_TO_BASED64 = \"BASED64\";\r\n    public static final String CIPHER_TO_HEX = \"HEX\";\r\n    private Cipher ecipher;\r\n    private Cipher dcipher;\r\n    private final byte[] keySalt = new byte[] { 45, -42, 105, -110, 115, -101,\r\n            99, -116, 45, -116, -111, 116, -101, 109, 42, -45 };\r\n    private static final String ENCODING_UTF8 = \"UTF8\";\r\n    public static void main(String[] args) {\r\n        KeyGenerator kg = null;\r\n        try {\r\n            kg = KeyGenerator.getInstance(\"AES\");\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        kg.init(128);\r\n        SecretKey secretKey = kg.generateKey();\r\n        byte[] encodedByteArray = secretKey.getEncoded();\r\n        System.out.println(Arrays.toString(encodedByteArray));\r\n    }\r\n    public Aes128Cipher() throws EncryptDecryptException {\r\n        SecretKeySpec skeySpec = new SecretKeySpec(keySalt, \"AES\");\r\n        try {\r\n            ecipher = Cipher.getInstance(\"AES\");\r\n            dcipher = Cipher.getInstance(\"AES\");\r\n            ecipher.init(Cipher.ENCRYPT_MODE, skeySpec);\r\n            dcipher.init(Cipher.DECRYPT_MODE, skeySpec);\r\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException\r\n                | InvalidKeyException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(\"unexpected\", e);\r\n        }\r\n    }\r\n    public String encrypt(String str) throws EncryptDecryptException {\r\n        return encrypt(str, CIPHER_TO_HEX);\r\n    }\r\n    public String encrypt(String str, String cipherTo)\r\n            throws EncryptDecryptException {\r\n        try {\r\n            // Encode the string into bytes using utf-8\r\n            byte[] utf8 = str.getBytes(ENCODING_UTF8);\r\n            // Encrypt\r\n            byte[] enc = ecipher.doFinal(utf8);\r\n            if (CIPHER_TO_BASED64.equalsIgnoreCase(cipherTo)) {\r\n                Base64.Encoder encoder = Base64.getEncoder();\r\n                return encoder.encodeToString(enc);\r\n            } else {\r\n                // encrypt should produce url safe string, which best in HEX\r\n                return HexStringUtil.toHexString(enc);\r\n            }\r\n        } catch (javax.crypto.BadPaddingException | IllegalBlockSizeException\r\n                | UnsupportedEncodingException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(\"unexpected\", e);\r\n        }\r\n    }\r\n    public String decrypt(String str) throws EncryptDecryptException {\r\n        return decrypt(str, CIPHER_TO_HEX);\r\n    }\r\n    public String decrypt(String str, String cypherTo)\r\n            throws EncryptDecryptException {\r\n        try {\r\n            if (CIPHER_TO_BASED64.equalsIgnoreCase(cypherTo)) {\r\n                Base64.Decoder decoder = Base64.getDecoder();\r\n                byte[] cipherText = decoder.decode(str.getBytes(\"UTF8\"));\r\n                return new String(dcipher.doFinal(cipherText), \"UTF-8\");\r\n            } else {\r\n                // Decode base64 to get bytes\r\n                byte[] dec = HexStringUtil.fromHexString(str);\r\n                // Decrypt\r\n                byte[] utf8 = dcipher.doFinal(dec);\r\n                // Decode using utf-8\r\n                return new String(utf8, ENCODING_UTF8);\r\n            }\r\n        } catch (javax.crypto.BadPaddingException | IllegalBlockSizeException\r\n                | UnsupportedEncodingException e) {\r\n            e.printStackTrace();\r\n            throw new EncryptDecryptException(\"unexpected\", e);\r\n        }\r\n    }\r\n    private static class HexStringUtil {\r\n        // table to convert a nibble to a hex char.\r\n        private static char[] hexChar = { '0', '1', '2', '3', '4', '5', '6',\r\n                '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\r\n       /**\r\n         * Convert a hex string to a byte array. Permits upper or lower case\r\n         * hex.\r\n         * \r\n         * @param s\r\n         *            String must have even number of characters. and be formed\r\n         *            only of digits 0-9 A-F or a-f. No spaces, minus or plus\r\n         *            signs.\r\n         * @return corresponding byte array.\r\n         */\r\n        public static byte[] fromHexString(String s) {\r\n            int stringLength = s.length();\r\n            if ((stringLength & 0x1) != 0) {\r\n                throw new IllegalArgumentException(\r\n                        \"fromHexString requires an even number of hex characters\");\r\n            }\r\n            byte[] b = new byte[stringLength / 2];\r\n            for (int i = 0, j = 0; i < stringLength; i += 2, j++) {\r\n                int high = charToNibble(s.charAt(i));\r\n                int low = charToNibble(s.charAt(i + 1));\r\n                b[j] = (byte) ((high << 4) | low);\r\n            }\r\n            return b;\r\n        }\r\n        /**\r\n         * convert a single char to corresponding nibble.\r\n         * \r\n         * @param c\r\n         *            char to convert. must be 0-9 a-f A-F, no spaces, plus or\r\n         *            minus signs.\r\n         * \r\n         * @return corresponding integer\r\n         */\r\n        private static int charToNibble(char c) {\r\n            if ('0' <= c && c <= '9') {\r\n                return c - '0';\r\n            } else if ('a' <= c && c <= 'f') {\r\n                return c - 'a' + 0xa;\r\n            } else if ('A' <= c && c <= 'F') {\r\n                return c - 'A' + 0xa;\r\n            } else {\r\n                throw new IllegalArgumentException(\r\n                        \"Invalid hex character: \" + c);\r\n            }\r\n        }\r\n        public static String toHexString(byte[] b) {\r\n            StringBuffer sb = new StringBuffer(b.length * 2);\r\n            for (int i = 0; i < b.length; i++) {\r\n                // look up high nibble char\r\n                sb.append(hexChar[(b[i] & 0xf0) >>> 4]);\r\n                // look up low nibble char\r\n                sb.append(hexChar[b[i] & 0x0f]);\r\n            }\r\n            return sb.toString();\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h1,{id:"trouble-shooting--invalidkeyexception",children:"Trouble shooting : InvalidKeyException"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u4ee5 256 bits \u7684 key \u5efa\u7acb AES 256 cipher \u6642\r\n\u53ef\u80fd\u6703\u51fa\u73fe ",(0,i.jsxs)(n.strong,{children:["InvalidKeyException",":Illegal"," key size or default parameters"]})," \u932f\u8aa4\r\n\u9019\u662f JDK \u5c0d\u52a0\u5bc6\u91d1\u9470\u9577\u5ea6\u7684\u9650\u5236\u6240\u81f4\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u4e0b\u5217 Code \u53ef\u80fd\u62cb\u51fa InvalidKeyException"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Javascript",children:'    cipher = Cipher.getInstance("AES");\r\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u89e3\u6c7a InvalidKeyException \u7570\u5e38\u65b9\u5f0f"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u5230 ",(0,i.jsx)(n.strong,{children:"JAVA_HOME/jre/lib/security/java.scurity"}),"\r\n\u627e\u51fa\u6216\u589e\u52a0 crypto.policy=unlimited \u4e26\u8a2d\u5b9a\u70ba unlimited\r\n\u7136\u5f8c\u91cd\u555f Java \u5373\u53ef\u89e3\u6c7a"]}),"\n"]}),"\n"]})]})}function h(r={}){const{wrapper:n}={...(0,c.R)(),...r.components};return n?(0,i.jsx)(n,{...r,children:(0,i.jsx)(l,{...r})}):l(r)}}}]);