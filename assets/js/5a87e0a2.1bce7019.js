"use strict";(self.webpackChunktool=self.webpackChunktool||[]).push([[3720],{8453:(n,r,t)=>{t.d(r,{R:()=>s,x:()=>i});var e=t(6540);const o={},a=e.createContext(o);function s(n){const r=e.useContext(a);return e.useMemo((function(){return"function"==typeof n?n(r):{...r,...n}}),[r,n])}function i(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),e.createElement(a.Provider,{value:r},n.children)}},8962:(n,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>e,toc:()=>p});const e=JSON.parse('{"id":"Python/Misc/Python_Sorting_by_Pandas","title":"Python-Sorting by pandas","description":"Python - Sorting and Parsing CSV","source":"@site/docs/Python/05_Misc/Python_Sorting_by_Pandas.md","sourceDirName":"Python/05_Misc","slug":"/Python/Misc/Python_Sorting_by_Pandas","permalink":"/docs/Python/Misc/Python_Sorting_by_Pandas","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Python-Sorting by pandas","description":"Python - Sorting and Parsing CSV","keywords":["python","pandas","sort","parse","dateformat"]},"sidebar":"totem_sidebar","previous":{"title":"Python \u65e5\u671f\u8207\u6642\u9593","permalink":"/docs/Python/Misc/Python_3_Time"},"next":{"title":"Python \u62bd\u8c61\u65b9\u6cd5","permalink":"/docs/Python/OOP/Python_4_AbstractMethod"}}');var o=t(4848),a=t(8453);const s={title:"Python-Sorting by pandas",description:"Python - Sorting and Parsing CSV",keywords:["python","pandas","sort","parse","dateformat"]},i=void 0,d={},p=[];function _(n){const r={code:"code",pre:"pre",...(0,a.R)(),...n.components};return(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"\r\nimport json\r\nimport pandas as pd\r\nimport datetime\r\nimport time\r\nimport numpy as np\r\n\r\nimport datetime\r\nimport time\r\nimport calendar\r\n\r\ndef dateFormatID_BIRTH(row):\r\n    dateString = row['ID_BIRTH']\r\n    return dateFormat(dateString)\r\n\r\ndef dateFormat_XXXX(row):\r\n    dateString = row['XXXX']\r\n    return dateFormat(dateString)\r\n\r\ndef dateFormatWithColumn(row, column):\r\n    dateString = row[column]\r\n    return dateFormat(dateString)\r\n    \r\ndef dateFormat(dateString): \r\n    if '' == dateString or None == dateString:\r\n        return ''\r\n    else:\r\n        d = datetime.datetime.strptime(dateString, \"%Y/%m/%d\")\r\n        r = d.strftime(\"%Y/%m/%d\")\r\n        return r\r\n\r\ndef print2(msg):\r\n    print(datetime.datetime.now(), end=' =>  ')\r\n    print(msg)\r\n\r\ndef print3(msg):\r\n    print(datetime.datetime.now())\r\n    print(msg)\r\n    print('')\r\n    \r\ndef printType(obj):\r\n    print(type(obj)) \r\n    \r\n    \r\n    \r\n    \r\n# filea : \u96e2\u7dda\u8cc7\u6599 A\r\nfileA = r'C:\\Users\\user\\Anaconda-Python-Jupyter\\Python_diff\\filea.csv'\r\n\r\n# fileb : \u532f\u51fa\u8cc7\u6599 B\r\nfileB = r'C:\\Users\\user\\Anaconda-Python-Jupyter\\Python_diff\\fileb.csv'\r\n\r\noutA ='outA.csv'\r\noutB ='outB.csv'\r\n\r\n\r\nCOLUM_NAME_ID_BIRTH ='ID_BIRTH'\r\nROW_COUNT = 0\r\nerrors =[]\r\nequal_record =[]\r\n\r\n\r\nprint2('read_csv file A \u96e2\u7dda\u8cc7\u6599')\r\ndf_a = pd.read_csv(fileA, index_col=False, dtype=str)\r\ndf_a = df_a.replace({pd.np.nan: ''})\r\n\r\n# Sort by given column's value\r\ndf_as = df_a.sort_values(by =[COLUM_NAME_ID_BIRTH]).copy()\r\n# df_as = df_as.fillna('', inplace = True)\r\n\r\nprint2('read_csv file B \u532f\u51fa\u8cc7\u6599')\r\ndf_b = pd.read_csv(fileB, index_col=False, dtype=str)\r\ndf_b = df_b.replace({pd.np.nan: ''})\r\ndf_bs = df_b.sort_values(by =[COLUM_NAME_ID_BIRTH]).copy()\r\n# df_bs =df_bs.fillna('', inplace = True)\r\nprint2('read_csv stop')\r\n\r\n\r\ncolumns_of_a = list(df_as.columns)\r\ncolumns_of_b = list(df_bs.columns)\r\n\r\ncolumns_of_a_and_b = list(set(columns_of_a).intersection(set(columns_of_b)))\r\n\r\n# print(columns_of_a_and_b)\r\ncolumns_of_a_and_b.sort()\r\n\r\n\r\nprint('columns intersection')\r\n# print(columns_of_a_and_b)\r\n\r\noutputA = pd.DataFrame({})\r\noutputB = pd.DataFrame({})\r\n# aa = df_as.copy()\r\n# bb = df_bs.copy()\r\n\r\n\r\nprint('re assign data')\r\nfor index in columns_of_a_and_b:\r\n#   print(index)\r\n    outputA[index] = df_as[index]\r\n    outputB[index] = df_bs[index]\r\n    \r\n\r\nprint('date formatting')\r\noutputA[\"ID_BIRTH\"] = outputA.apply(dateFormatID_BIRTH, axis=1)\r\noutputA[\"XXXX\"] = outputA.apply(dateFormat_XXXX, axis=1)\r\n\r\n\r\nprint('date formatting2')\r\noutputB[\"ID_BIRTH\"] = outputB.apply(dateFormatID_BIRTH, axis=1)\r\noutputB[\"XXXX\"] = outputB.apply(dateFormat_XXXX, axis=1)\r\n\r\nprint2('to file sorted_from.csv')\r\noutputA.to_csv(outA, index= False)\r\nprint2('to file sorted_output.csv')\r\noutputB.to_csv(outB, index= False)\r\nprint2('End')\r\n\r\n\r\n# removes = ['YYYY', 'ZZZZ']\r\n# q_df.drop(removes, axis=1, inplace=True)\r\n\n"})})}function c(n={}){const{wrapper:r}={...(0,a.R)(),...n.components};return r?(0,o.jsx)(r,{...n,children:(0,o.jsx)(_,{...n})}):_(n)}}}]);