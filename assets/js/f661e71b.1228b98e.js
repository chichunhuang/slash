"use strict";(self.webpackChunktotem=self.webpackChunktotem||[]).push([[5898],{63894:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=e(87462),a=(e(67294),e(3905));const r={title:"Python-Sorting by pandas",description:"Python - Sorting and Parsing CSV",keywords:["python","pandas","sort","parse","dateformat"]},i=void 0,s={unversionedId:"DevTech/Python/Misc/Sorting_by_pandas_Python",id:"DevTech/Python/Misc/Sorting_by_pandas_Python",title:"Python-Sorting by pandas",description:"Python - Sorting and Parsing CSV",source:"@site/docs/DevTech/Python/Misc/Sorting_by_pandas_Python.md",sourceDirName:"DevTech/Python/Misc",slug:"/DevTech/Python/Misc/Sorting_by_pandas_Python",permalink:"/docs/DevTech/Python/Misc/Sorting_by_pandas_Python",draft:!1,tags:[],version:"current",frontMatter:{title:"Python-Sorting by pandas",description:"Python - Sorting and Parsing CSV",keywords:["python","pandas","sort","parse","dateformat"]},sidebar:"totem_sidebar",previous:{title:"Python \u65e5\u671f\u8207\u6642\u9593",permalink:"/docs/DevTech/Python/Misc/Python_3_Time"},next:{title:"Python \u62bd\u8c61\u65b9\u6cd5",permalink:"/docs/DevTech/Python/OOP/Python_4_AbstractMethod"}},d={},p=[],_={toc:p},u="wrapper";function c(n){let{components:t,...e}=n;return(0,a.kt)(u,(0,o.Z)({},_,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"\nimport json\nimport pandas as pd\nimport datetime\nimport time\nimport numpy as np\n\nimport datetime\nimport time\nimport calendar\n\ndef dateFormatID_BIRTH(row):\n    dateString = row['ID_BIRTH']\n    return dateFormat(dateString)\n\ndef dateFormat_XXXX(row):\n    dateString = row['XXXX']\n    return dateFormat(dateString)\n\ndef dateFormatWithColumn(row, column):\n    dateString = row[column]\n    return dateFormat(dateString)\n    \ndef dateFormat(dateString): \n    if '' == dateString or None == dateString:\n        return ''\n    else:\n        d = datetime.datetime.strptime(dateString, \"%Y/%m/%d\")\n        r = d.strftime(\"%Y/%m/%d\")\n        return r\n\ndef print2(msg):\n    print(datetime.datetime.now(), end=' =>  ')\n    print(msg)\n\ndef print3(msg):\n    print(datetime.datetime.now())\n    print(msg)\n    print('')\n    \ndef printType(obj):\n    print(type(obj)) \n    \n    \n    \n    \n# filea : \u96e2\u7dda\u8cc7\u6599 A\nfileA = r'C:\\Users\\user\\Anaconda-Python-Jupyter\\Python_diff\\filea.csv'\n\n# fileb : \u532f\u51fa\u8cc7\u6599 B\nfileB = r'C:\\Users\\user\\Anaconda-Python-Jupyter\\Python_diff\\fileb.csv'\n\noutA ='outA.csv'\noutB ='outB.csv'\n\n\nCOLUM_NAME_ID_BIRTH ='ID_BIRTH'\nROW_COUNT = 0\nerrors =[]\nequal_record =[]\n\n\nprint2('read_csv file A \u96e2\u7dda\u8cc7\u6599')\ndf_a = pd.read_csv(fileA, index_col=False, dtype=str)\ndf_a = df_a.replace({pd.np.nan: ''})\n\n# Sort by given column's value\ndf_as = df_a.sort_values(by =[COLUM_NAME_ID_BIRTH]).copy()\n# df_as = df_as.fillna('', inplace = True)\n\nprint2('read_csv file B \u532f\u51fa\u8cc7\u6599')\ndf_b = pd.read_csv(fileB, index_col=False, dtype=str)\ndf_b = df_b.replace({pd.np.nan: ''})\ndf_bs = df_b.sort_values(by =[COLUM_NAME_ID_BIRTH]).copy()\n# df_bs =df_bs.fillna('', inplace = True)\nprint2('read_csv stop')\n\n\ncolumns_of_a = list(df_as.columns)\ncolumns_of_b = list(df_bs.columns)\n\ncolumns_of_a_and_b = list(set(columns_of_a).intersection(set(columns_of_b)))\n\n# print(columns_of_a_and_b)\ncolumns_of_a_and_b.sort()\n\n\nprint('columns intersection')\n# print(columns_of_a_and_b)\n\noutputA = pd.DataFrame({})\noutputB = pd.DataFrame({})\n# aa = df_as.copy()\n# bb = df_bs.copy()\n\n\nprint('re assign data')\nfor index in columns_of_a_and_b:\n#   print(index)\n    outputA[index] = df_as[index]\n    outputB[index] = df_bs[index]\n    \n\nprint('date formatting')\noutputA[\"ID_BIRTH\"] = outputA.apply(dateFormatID_BIRTH, axis=1)\noutputA[\"XXXX\"] = outputA.apply(dateFormat_XXXX, axis=1)\n\n\nprint('date formatting2')\noutputB[\"ID_BIRTH\"] = outputB.apply(dateFormatID_BIRTH, axis=1)\noutputB[\"XXXX\"] = outputB.apply(dateFormat_XXXX, axis=1)\n\nprint2('to file sorted_from.csv')\noutputA.to_csv(outA, index= False)\nprint2('to file sorted_output.csv')\noutputB.to_csv(outB, index= False)\nprint2('End')\n\n\n# removes = ['YYYY', 'ZZZZ']\n# q_df.drop(removes, axis=1, inplace=True)\n\n")))}c.isMDXComponent=!0}}]);