"use strict";(self.webpackChunktotem=self.webpackChunktotem||[]).push([[3243],{55144:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=n(87462),l=(n(67294),n(3905));n(13848);const r={title:"Python Utils",description:"\u96dc\u4e03\u96dc\u516b\u7684\u5de5\u5177",keywords:["Python"]},p="Python Utils",i={unversionedId:"DevTech/Python/Python_Utils",id:"DevTech/Python/Python_Utils",title:"Python Utils",description:"\u96dc\u4e03\u96dc\u516b\u7684\u5de5\u5177",source:"@site/docs/DevTech/Python/Python_Utils.md",sourceDirName:"DevTech/Python",slug:"/DevTech/Python/Python_Utils",permalink:"/docs/DevTech/Python/Python_Utils",draft:!1,tags:[],version:"current",frontMatter:{title:"Python Utils",description:"\u96dc\u4e03\u96dc\u516b\u7684\u5de5\u5177",keywords:["Python"]},sidebar:"tutorialSidebar",previous:{title:"Python List",permalink:"/docs/DevTech/Python/Python_Typing_list"},next:{title:"Pickle \u5e8f\u5217\u5316\u8207\u53cd\u5e8f\u5217\u5316",permalink:"/docs/DevTech/Python/Python_module_pickle"}},o={},s=[{value:'<span id="map_function">map() : \u8fed\u4ee3\u57f7\u884c\u7279\u5b9a\u52d5\u4f5c</span>',id:"map--\u8fed\u4ee3\u57f7\u884c\u7279\u5b9a\u52d5\u4f5c",level:2},{value:'<span id="filter_function">filter() : \u5229\u7528\u5236\u5b9a\u65b9\u6cd5\u904e\u6ffe iterable object</span>',id:"filter--\u5229\u7528\u5236\u5b9a\u65b9\u6cd5\u904e\u6ffe-iterable-object",level:2},{value:'<span id="zip_function">zip() : \u628a\u591a\u500b iterable objects \u4f9d\u5e8f\u7d44\u5408\u6210 tuples</span>',id:"zip--\u628a\u591a\u500b-iterable-objects-\u4f9d\u5e8f\u7d44\u5408\u6210-tuples",level:2},{value:'<span id="enumerate_function">enumerate() : \u628a iterable object \u8f49\u6210 index, element tuples</span>',id:"enumerate--\u628a-iterable-object-\u8f49\u6210-index-element-tuples",level:2}],m={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"python-utils"},"Python Utils"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Python \u539f\u751f\u7684\u5de5\u5177\u985e\u4f3c\u4e4e\u5f88\u591a\u5f88\u96dc\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u4e5f\u4f3c\u4e4e\u6c92\u505a\u6a21\u7d44\u6b78\u985e\u52a0\u4e0a\u672c\u8eab\u8a9e\u8a00\u7684\u7279\u6027\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u82e5\u6c92\u4ed8\u8cbb\u7248\u7684 IDE\uff0c\u4e14\u50cf\u6211\u4e0d\u662f Python \u7684\u91cd\u5ea6\u4f7f\u7528\u8005\u7684\u8a71\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u60f3\u627e\u7279\u5b9a\u5de5\u5177\u6642\u771f\u7684\u5f88\u9ebb\u7169\uff0c\u6240\u4ee5\u653e\u5728\u9019\u5217\u8868\u56c9\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u4ee5\u5f8c\u518d\u505a\u6b78\u985e...  ")),(0,l.kt)("div",{hidden:!0}," https://www.geeksforgeeks.org/python-map-function/"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u9019\u4e00\u5340: \u985e\u4f3c Java \u7684 stream. Java \u7684 lambda api. DSL style.")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"\u5de5\u5177\u7c21\u8ff0"),(0,l.kt)("th",{parentName:"tr",align:null},"metaphor"),(0,l.kt)("th",{parentName:"tr",align:null},"\u6ce8\u610f"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"builtins.py ",(0,l.kt)("br",null),(0,l.kt)("a",{parentName:"td",href:"#map_function"},"map()")),(0,l.kt)("td",{parentName:"tr",align:null},"\u8fed\u4ee3\u57f7\u884c\u7279\u5b9a\u52d5\u4f5c"),(0,l.kt)("td",{parentName:"tr",align:null},"Java stream \u7684 foreach"),(0,l.kt)("td",{parentName:"tr",align:null},"generator(\u8cc7\u6599\u53ea\u80fd\u8b80\u4e00\u6b21,next()\u53d6\u503c)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"builtins.py ",(0,l.kt)("br",null),(0,l.kt)("a",{parentName:"td",href:"#filter_function"},"filter()")),(0,l.kt)("td",{parentName:"tr",align:null},"\u8207 map() \u4f7f\u7528\u65b9\u6cd5\u4e00\u6a23\uff0c\u53ea\u5dee\u5728 function \u9808\u56de\u50b3 boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Java stream \u7684 filter"),(0,l.kt)("td",{parentName:"tr",align:null},"generator(\u8cc7\u6599\u53ea\u80fd\u8b80\u4e00\u6b21,next()\u53d6\u503c)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"builtins.py  ",(0,l.kt)("br",null),(0,l.kt)("a",{parentName:"td",href:"#zip_function"},"zip()")),(0,l.kt)("td",{parentName:"tr",align:null},"\u628a\u591a\u500b iterable objects \u4f9d\u5e8f\u7d44\u5408\u6210 tuples"),(0,l.kt)("td",{parentName:"tr",align:null},"Java stream \u7684 map"),(0,l.kt)("td",{parentName:"tr",align:null},"generator(\u8cc7\u6599\u53ea\u80fd\u8b80\u4e00\u6b21,next()\u53d6\u503c)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#enumerate_function"},"enumerate()")),(0,l.kt)("td",{parentName:"tr",align:null},"\u628a iterable object \u8f49\u6210 index, element tuples"),(0,l.kt)("td",{parentName:"tr",align:null},"placeholder_metaphor"),(0,l.kt)("td",{parentName:"tr",align:null},"generator(\u8cc7\u6599\u53ea\u80fd\u8b80\u4e00\u6b21,next()\u53d6\u503c)")))),(0,l.kt)("h2",{id:"map--\u8fed\u4ee3\u57f7\u884c\u7279\u5b9a\u52d5\u4f5c"},(0,l.kt)("span",{id:"map_function"},"map() : \u8fed\u4ee3\u57f7\u884c\u7279\u5b9a\u52d5\u4f5c")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"map function \u63a5\u53d7\u4e00\u500b function\uff0c",(0,l.kt)("br",{parentName:"p"}),"\n","\u4e26\u5c07\u5f8c\u65b9\u50b3\u5165\u7684 argumants (iterable objects) \u6210\u5c0d\u50b3\u5165\u8a72 function \u4e26\u57f7\u884c\uff0c",(0,l.kt)("br",{parentName:"p"}),"\n","\u800c\u5f8c\u56de\u50b3\u4e00\u500b map class (generator)\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u6ce8\u610f: ",(0,l.kt)("span",{style:{color:"#ff6600"}},"map class \u7684\u8cc7\u6599\u50c5\u80fd\u8b80\u4e00\u6b21"),"\uff0c",(0,l.kt)("br",{parentName:"p"}),"\n","\u53ef\u7528(generator \u7279\u6027)   "),(0,l.kt)("blockquote",{parentName:"blockquote"},(0,l.kt)("p",{parentName:"blockquote"},"next() \u8d70\u8a2a\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","list() copy \u5168\u90e8\u7d50\u679c\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u53ef\u642d\u914d\u8ff4\u5708\u6216 comprehension \u4f7f\u7528\u3002   ")),(0,l.kt)("p",{parentName:"blockquote"},"\u529f\u80fd\u985e\u4f3c Java lambda \u7684 foreach \u529f\u80fd\u3002\u7c21\u5316\u4e00\u7cfb\u5217\u8cc7\u6599\u7684\u8fed\u4ee3\u8655\u7406\u3002")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Syntax of map function")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"result_map = map(fun, agumentN_list... )\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"map function : Basic")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def multiple(input, repeat):\n    return input * repeat\n\narg1 = 'hello'\narg2 = [1, 2, 3, 4]\nx = map(multiple, arg1, arg2)\n# \u672a\u6210\u5c0d\u7684\uff0c\u4e00\u7387\u88ab skipped\nfor i in x:\n    print(i)\nprint(type(x))\nprint(type(list((x))))\n# h\n# ee\n# lll\n# llll\n# <class 'map'> : \u662f map \u4e0d\u662f dict\n# \u8f49\u6210 list \u65b9\u4fbf\u4f7f\u7528\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"map function : labmda")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u82e5\u53ea\u662f\u4e00\u500b\u81e8\u6642\u7528\u7684 function\uff0c\u4e5f\u53ef\u7528\u533f\u540d\u65b9\u6cd5 lambda \u4f86\u4ee3\u66ff\u3002\n\u4e0a\u65b9\u7bc4\u4f8b\u7b49\u540c\u65bc:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"x = map(lambda input, times: input*times, 'hello', [1, 2, 3, 4])\n# \u672a\u6210\u5c0d\u7684\uff0c\u4e00\u7387\u88ab skipped\nfor i in x:\n    print(i)\nprint(type(x))\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"map function : Back to Basics")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u9019\u908a\u518d\u6f14\u793a\u5728\u4e0d\u77e5\u9053 map function \u6642\u4e00\u822c\u4eba\u7684\u8655\u7406\u65b9\u5f0f")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"size = len(arg1) if (len(arg2) > len(arg1)) else len(arg2)\nfor i in range(0, size):\n    print(multiple(arg1[i], arg2[i]))\n")),(0,l.kt)("h2",{id:"filter--\u5229\u7528\u5236\u5b9a\u65b9\u6cd5\u904e\u6ffe-iterable-object"},(0,l.kt)("span",{id:"filter_function"},"filter() : \u5229\u7528\u5236\u5b9a\u65b9\u6cd5\u904e\u6ffe iterable object")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Syntax of filter function")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"result = filter(funReturnBool, iterable)\n\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"filter function")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\nclass Exam:\n    # Python \u7684\u578b\u5225(\u5192\u865f\u5f8c\u9762)\u50c5\u53ea\u662f [\u63d0\u793a]\u3002\u6240\u4ee5\u61c9\u8a72\u81ea\u884c\u6aa2\u67e5\u3002\n    def __init__(self, name: str, score: int, penalty: int):\n        if not isinstance(name, str):\n            raise TypeError(\'name should be str\')\n        self.score = score\n        self.penalty = penalty\n        self.name = name\n\n    def win(self):\n        self.score += 1\n\n    def lose(self):\n        self.penalty += 1\n\n    def get_points(self):\n        return self.score - self.penalty\n\n    def display(self):\n        return self.name + "-" + str(self.get_points())\n\nexe1 = Exam("Tom", 80, 10)\nexe2 = Exam("Jack", 95, 30)\nexe3 = Exam("May", 60, 20)\nexe1.win()\nexe2.lose()\n\nexams = [exe1, exe2, exe3]\n\ndef is_pass(exam: Exam):\n    return exam.get_points() > 60\n\nresult = filter(is_pass, exams)\n\nfor r in result:\n    print(type(r), r.display())\n# <class \'__main__.Exam\'> Tom-71\n# <class \'__main__.Exam\'> Jack-64\n')),(0,l.kt)("h2",{id:"zip--\u628a\u591a\u500b-iterable-objects-\u4f9d\u5e8f\u7d44\u5408\u6210-tuples"},(0,l.kt)("span",{id:"zip_function"},"zip() : \u628a\u591a\u500b iterable objects \u4f9d\u5e8f\u7d44\u5408\u6210 tuples")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"zip function \u5982\u540c\u540d\u5b57\uff0c",(0,l.kt)("br",{parentName:"p"}),"\n","\u4e26\u5c07\u5f8c\u65b9\u50b3\u5165\u7684 argumants (iterable objects) \u6210\u5c0d\u7d44\u5408\u6210 tuples\uff0c",(0,l.kt)("br",{parentName:"p"}),"\n","\u800c\u5f8c\u56de\u50b3\u4e00\u500b zip class (generator)\u3002\n\u540c\u6a23\u7684\uff0c\u672a\u6210\u7d44\u7684\u4e0d\u8655\u7406\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u6ce8\u610f: ",(0,l.kt)("span",{style:{color:"#ff6600"}},"generator \u7684\u8cc7\u6599\u50c5\u80fd\u8b80\u4e00\u6b21"),"\uff0c\u53ef\u7528 list() \u505a copy\u3002  "),(0,l.kt)("p",{parentName:"blockquote"},"\u529f\u80fd\u985e\u4f3c Java stream \u7684 map \u529f\u80fd\u3002\u7c21\u5316\u4e00\u7cfb\u5217\u8cc7\u6599\u7684\u8fed\u4ee3\u8655\u7406\u3002")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Syntax of zip function")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"result_zip = zip(agumentN_list... )\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"zip function : Basic")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"result_of_zip = list(zip('hello', [1, 2, 3, 4], {\"!\", \"@\", \"#\", \"$\", \"%\", \"^\"}))\n\nfor item in result_of_zip:\n    print(type(item), '-', item)\n# <class 'tuple'> - ('h', 1, '$')\n# <class 'tuple'> - ('e', 2, '@')\n# <class 'tuple'> - ('l', 3, '^')\n# <class 'tuple'> - ('l', 4, '!')\n\nfor item in result_of_zip:\n    print(type(item), '-', item)\n\nprint(result_of_zip)\n# <zip object>\nprint(type(result_of_zip))\n# <class 'zip'>\n")),(0,l.kt)("h2",{id:"enumerate--\u628a-iterable-object-\u8f49\u6210-index-element-tuples"},(0,l.kt)("span",{id:"enumerate_function"},"enumerate() : \u628a iterable object \u8f49\u6210 index, element tuples")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"enumerate() \u53ef\u4ee5\u5c07\u6307\u5b9a\u7684 iterable object \u8f49\u6210 index, element tuples\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u53e6\u5916\uff0cenumerate() \u53ef\u4ee5\u6307\u5b9a\u8d77\u59cb\u7684 index\uff0c\u9810\u8a2d\u8d77\u59cb\u70ba\u96f6\u3002",(0,l.kt)("br",{parentName:"p"}),"\n","\u8d70\u8a2a\u6642\u53ef\u7528 next() \u4f86\u9032\u884c\u3002   "),(0,l.kt)("p",{parentName:"blockquote"},"\u6ce8\u610f: ",(0,l.kt)("span",{style:{color:"#ff6600"}},"enumerate() \u5f97\u5230\u7684\u662f enumerate class generator"),"\u3002\u53ef\u7528 list() \u505a copy\u3002  ")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Syntax of enumerate function")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"result = enumerate(iterable, init_index)\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"enumerate() Baic")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"\nchars = 'ABCDE'\nenum_chars = enumerate(chars, 0)\nprint(type(enum_chars))\n# <class 'enumerate'>\n    \nprint(next(enum_chars))\n# (0, 'A')\nprint(next(enum_chars))\n# (1, 'B')\nprint(next(enum_chars))\n# (2, 'C')\n\n# \u5269\u5169\u500b\nfor e in enum_chars:\n    print(type(e), '-', e)\n# <class 'tuple'> - (3, 'D')\n# <class 'tuple'> - (4, 'E')\n\n")))}c.isMDXComponent=!0}}]);