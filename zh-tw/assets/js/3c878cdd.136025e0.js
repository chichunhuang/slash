"use strict";(self.webpackChunktotem=self.webpackChunktotem||[]).push([[7344],{1346:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>y});var r=n(7462),a=(n(7294),n(3905));n(1424);const c={title:"Java PBE \u52a0\u89e3\u5bc6",description:"\u4ee5 Java PBE PBEWITHMD5andDES \u9032\u884c\u8cc7\u6599\u52a0\u89e3\u5bc6",keywords:["pbe","java","cipher","encrypt","decrypt"]},p="PBEWITHMD5andDES",i={unversionedId:"DevTech/Java/Cypher/Java_Pbe_Cipher",id:"DevTech/Java/Cypher/Java_Pbe_Cipher",title:"Java PBE \u52a0\u89e3\u5bc6",description:"\u4ee5 Java PBE PBEWITHMD5andDES \u9032\u884c\u8cc7\u6599\u52a0\u89e3\u5bc6",source:"@site/docs/DevTech/Java/Cypher/Java_Pbe_Cipher.md",sourceDirName:"DevTech/Java/Cypher",slug:"/DevTech/Java/Cypher/Java_Pbe_Cipher",permalink:"/zh-tw/docs/DevTech/Java/Cypher/Java_Pbe_Cipher",draft:!1,tags:[],version:"current",frontMatter:{title:"Java PBE \u52a0\u89e3\u5bc6",description:"\u4ee5 Java PBE PBEWITHMD5andDES \u9032\u884c\u8cc7\u6599\u52a0\u89e3\u5bc6",keywords:["pbe","java","cipher","encrypt","decrypt"]},sidebar:"tutorialSidebar",previous:{title:"Java Cipher Intro",permalink:"/zh-tw/docs/DevTech/Java/Cypher/Java_Encryption"},next:{title:"Java RSA \u52a0\u89e3\u5bc6",permalink:"/zh-tw/docs/DevTech/Java/Cypher/Java_Rsa_Cipher"}},o={},y=[{value:"\u5c0d\u7a31\u6027\u52a0\u5bc6\u7b97\u6cd5\uff1a",id:"\u5c0d\u7a31\u6027\u52a0\u5bc6\u7b97\u6cd5",level:2}],s={toc:y},l="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pbewithmd5anddes"},"PBEWITHMD5andDES"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u985e\u4f3c\u5c0d",(0,a.kt)("a",{parentName:"p",href:"./Java_Aes_Cipher"},"\u7a31\u5f0f\u52a0\u5bc6"),"\uff0c\u53ea\u662f\u6536\u9001\u96d9\u65b9\u4fdd\u5b58\u7684\u4e0d\u662f\u91d1\u9470\u800c\u662f\u4e00\u7d44\u5bc6\u78bc\u3002\n\u6536\u9001\u96d9\u65b9\u6301\u6709\u5bc6\u78bc\uff0cApp\u7ba1\u7406\u4eba(ex:MIS)\u5247\u4fdd\u6709\u96dc\u6e4a\u78bc\uff0c\u7a0b\u5f0f\u4e2d\u5247\u5167\u85cf\u6f14\u7b97\u905e\u8ff4\u6b21\u6578\u3002\nPBEWITHMD5andDES \u6f14\u7b97\u6cd5\u591a\u4e86\u6a5f\u500b\u53c3\u6578"),(0,a.kt)("ol",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ol"},"\u4f7f\u7528 pwd \u4f86\u5efa\u7acb encryption key\u3002"),(0,a.kt)("li",{parentName:"ol"},"salt string"),(0,a.kt)("li",{parentName:"ol"},"\u6f14\u7b97\u7684\u905e\u8ff4\u6b21\u6578\n\u4e5f\u5c31\u662f\u8aaa\u76f8\u8f03\u65bc\u4e00\u822c\u5c07 salt \u52a0\u5165\u8cc7\u6599\u52a0\u5bc6\u6f14\u7b97\u5916\uff0c\nPBEWITHMD5andDES A:\u9084\u6703\u6aa2\u67e5\u89e3\u5bc6\u91d1\u9470\u662f\u5426\u6b63\u78ba\u3002\n\u53e6\u5916\uff0cB:\u4e5f\u6703\u4f9d\u64da iteration count \u8a2d\u5b9a\u503c\u4f86\u91cd\u8907\u52a0\u5bc6\u6240\u5f97\u51fa\u7684\u7d50\u679c\u3002\n\u5229\u7528\u589e\u52a0 A/B \u5169\u9805\u63aa\u65bd\u589e\u52a0\u5317\u7834\u89e3\u7684\u96e3\u5ea6\u3002"))),(0,a.kt)("h2",{id:"\u5c0d\u7a31\u6027\u52a0\u5bc6\u7b97\u6cd5"},"\u5c0d\u7a31\u6027\u52a0\u5bc6\u7b97\u6cd5\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5c0d\u7a31\u5f0f\u52a0\u5bc6\u5c31\u662f\u52a0\u5bc6\u548c\u89e3\u5bc6\u4f7f\u7528\u540c\u4e00\u500b\u5bc6\u9470\n\u8cc7\u6599\u63a5\u6536\u96d9\u65b9\u9700\u5148\u77e5\u9053\u96d9\u65b9\u52a0\u5bc6\u7684\u91d1\u9470\u8207\u6f14\u7b97\u6cd5\uff0c\u624d\u80fd\u5b8c\u6574\u52a0\u89e3\u5bc6\u3002 "),(0,a.kt)("p",{parentName:"blockquote"},"ex: AES\u3001DES\u30013DES\u3001PBEWITHMD5andDES")),(0,a.kt)("h1",{id:"pbewithmd5anddes-\u7bc4\u4f8b"},"PBEWITHMD5andDES \u7bc4\u4f8b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.Key;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.spec.InvalidKeySpecException;\nimport java.util.Arrays;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.PBEParameterSpec;\n\nimport util.EncryptDecryptException;\n\n// \u985e\u4f3c\u5c0d\u7a31\u5f0f\u52a0\u5bc6\uff0c\u53ea\u662f\u6536\u9001\u96d9\u65b9\u4fdd\u5b58\u7684\u4e0d\u662f\u91d1\u9470\u800c\u662f\u4e00\u7d44\u5bc6\u78bc\u3002\n// \u6536\u9001\u96d9\u65b9\u6301\u6709\u5bc6\u78bc\uff0cApp\u7ba1\u7406\u4eba(ex:MIS)\u5247\u4fdd\u6709\u96dc\u6e4a\u78bc\uff0c\u7a0b\u5f0f\u4e2d\u5247\u5167\u85cf\u6f14\u7b97\u905e\u8ff4\u6b21\u6578\u3002\n\npublic class PbeCipher {\n\n    public static void main(String[] args) {\n\n        try {\n            String pwd = "password";\n\n            // Salt must be 8 bytes long\n            String salt = "saltsalt";\n\n            byte[] data = new byte[] { 1, 3, 5, 7, 11, 13, 17, 19 };\n\n            byte[] encrypted = PbeCipher.symmetricalEncrypt(data, pwd, salt);\n\n            System.out.println(Arrays.equals(data,\n                    PbeCipher.symmetricalDecrypt(encrypted, pwd, salt)));\n\n            /**\n             * <pre>\n             * System.out.println(Arrays.equals(data,\n             *         PbeCipher.symmetricalDecrypt(encrypted, pwd2, salt)));\n             * \n             * System.out.println(Arrays.equals(data,\n             *         PbeCipher.symmetricalDecrypt(encrypted, pwd, salt2)));\n             * // javax.crypto.BadPaddingException: Given final block not\n             * // properly\n             * // padded. Such issues can arise if a bad key is used during\n             * // decryption.\n             * \n             * </pre>\n             */\n\n        } catch (EncryptDecryptException e) {\n            e.printStackTrace();\n            throw new RuntimeException("unexpected", e);\n        }\n    }\n\n    // iteration count: \u905e\u8ff4\u6f14\u7b97\u6b21\u6578\n    private static final int ITERATION_COUNT = 31;\n\n    public static final String SYMMETRICAL_ALGORITHM = "PBEWITHMD5andDES";\n\n    /**\n     * @param cipherMode\n     *            : javax.crypto.Cipher.DECRYPT_MODE / Cipher.ENCRYPT_MODE\n     */\n    private static Cipher createSymmetricalCipher(String password, String salt,\n            int cipherMode) throws EncryptDecryptException {\n        try {\n            Key key = prepareEncryptionKey(password);\n            PBEParameterSpec paramSpec = new PBEParameterSpec(salt.getBytes(),\n                    ITERATION_COUNT);\n            Cipher cipher = Cipher.getInstance(SYMMETRICAL_ALGORITHM);\n            cipher.init(cipherMode, key, paramSpec);\n            return cipher;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            throw new EncryptDecryptException(e);\n        } catch (NoSuchPaddingException e) {\n            e.printStackTrace();\n            throw new EncryptDecryptException(e);\n        } catch (InvalidKeyException e) {\n            e.printStackTrace();\n            throw new EncryptDecryptException(e);\n        } catch (InvalidAlgorithmParameterException e) {\n            e.printStackTrace();\n            throw new EncryptDecryptException(e);\n        }\n    }\n\n    private static Key prepareEncryptionKey(String password)\n            throws EncryptDecryptException {\n        PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n\n        try {\n            SecretKeyFactory keyFactory = SecretKeyFactory\n                    .getInstance(SYMMETRICAL_ALGORITHM);\n            SecretKey secretKey = keyFactory.generateSecret(keySpec);\n            return secretKey;\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            throw new EncryptDecryptException(e);\n        } catch (InvalidKeySpecException e) {\n            e.printStackTrace();\n            throw new EncryptDecryptException(e);\n        }\n    }\n\n    public static byte[] symmetricalDecrypt(byte[] data, String password,\n            String salt) throws EncryptDecryptException {\n        if (data == null) return null;\n\n        try {\n            Cipher cipher = createSymmetricalCipher(password, salt,\n                    Cipher.DECRYPT_MODE);\n            return cipher.doFinal(data);\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n            throw new EncryptDecryptException(e);\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n            throw new EncryptDecryptException(e);\n        }\n\n    }\n\n    public static byte[] symmetricalEncrypt(byte[] data, String password,\n            String salt) throws EncryptDecryptException {\n        if (data == null) return null;\n\n        try {\n            Cipher cipher = createSymmetricalCipher(password, salt,\n                    Cipher.ENCRYPT_MODE);\n\n            return cipher.doFinal(data);\n        } catch (IllegalBlockSizeException e) {\n            e.printStackTrace();\n            throw new EncryptDecryptException(e);\n        } catch (BadPaddingException e) {\n            e.printStackTrace();\n            throw new EncryptDecryptException(e);\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);